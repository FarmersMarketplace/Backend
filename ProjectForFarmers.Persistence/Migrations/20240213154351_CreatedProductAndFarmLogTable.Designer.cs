// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ProjectForFarmers.Persistence.DbContexts;

#nullable disable

namespace ProjectForFarmers.Persistence.Migrations
{
    [DbContext(typeof(MainDbContext))]
    [Migration("20240213154351_CreatedProductAndFarmLogTable")]
    partial class CreatedProductAndFarmLogTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ProjectForFarmers.Domain.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Accounts", (string)null);
                });

            modelBuilder.Entity("ProjectForFarmers.Domain.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("HouseNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Settlement")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Addresses", (string)null);
                });

            modelBuilder.Entity("ProjectForFarmers.Domain.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Categories", (string)null);
                });

            modelBuilder.Entity("ProjectForFarmers.Domain.DayOfWeek", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte?>("EndHour")
                        .HasColumnType("smallint");

                    b.Property<byte?>("EndMinute")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsOpened")
                        .HasColumnType("boolean");

                    b.Property<byte?>("StartHour")
                        .HasColumnType("smallint");

                    b.Property<byte?>("StartMinute")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("DaysOfWeek", (string)null);
                });

            modelBuilder.Entity("ProjectForFarmers.Domain.Farm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uuid");

                    b.Property<List<Guid>>("Categories")
                        .HasColumnType("uuid[]");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ContactPhone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<List<string>>("ImagesNames")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PaymentDataId")
                        .HasColumnType("uuid");

                    b.Property<int[]>("PaymentTypes")
                        .HasColumnType("integer[]");

                    b.Property<int[]>("ReceivingTypes")
                        .HasColumnType("integer[]");

                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("uuid");

                    b.Property<string>("SocialPageUrl")
                        .HasColumnType("text");

                    b.Property<List<Guid>>("Subcategories")
                        .HasColumnType("uuid[]");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("OwnerId");

                    b.HasIndex("PaymentDataId");

                    b.HasIndex("ScheduleId")
                        .IsUnique();

                    b.ToTable("Farms", (string)null);
                });

            modelBuilder.Entity("ProjectForFarmers.Domain.FarmLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FarmId")
                        .HasColumnType("uuid");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<List<string>>("Parameters")
                        .HasColumnType("text[]");

                    b.Property<string>("PropertyName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FarmId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("FarmsLogs", (string)null);
                });

            modelBuilder.Entity("ProjectForFarmers.Domain.MonthStatistic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BookedOrdersStatisticId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompletedOrdersStatisticId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CustomerWithHighestPaymentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("FarmId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("HighestCustomerPayment")
                        .HasColumnType("numeric");

                    b.Property<float>("HighestCustomerPaymentPercentage")
                        .HasColumnType("real");

                    b.Property<Guid>("NewOrdersStatisticId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProcessingOrdersStatisticId")
                        .HasColumnType("uuid");

                    b.Property<int>("Producer")
                        .HasColumnType("integer");

                    b.Property<Guid>("ProducerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("TotalActivityStatisticId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("TotalRevenue")
                        .HasColumnType("numeric");

                    b.Property<float>("TotalRevenueChangePercentage")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("BookedOrdersStatisticId")
                        .IsUnique();

                    b.HasIndex("CompletedOrdersStatisticId")
                        .IsUnique();

                    b.HasIndex("FarmId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("NewOrdersStatisticId")
                        .IsUnique();

                    b.HasIndex("ProcessingOrdersStatisticId")
                        .IsUnique();

                    b.HasIndex("TotalActivityStatisticId")
                        .IsUnique();

                    b.ToTable("MonthesStatistics", (string)null);
                });

            modelBuilder.Entity("ProjectForFarmers.Domain.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeliveryPointId")
                        .HasColumnType("uuid");

                    b.Property<long>("Number")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(7)
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("Number"));

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("integer");

                    b.Property<int>("PaymentType")
                        .HasColumnType("integer");

                    b.Property<int>("Producer")
                        .HasColumnType("integer");

                    b.Property<Guid>("ProducerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ReceiveDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ReceivingType")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalPayment")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("CreationDate")
                        .IsDescending();

                    b.HasIndex("CustomerId");

                    b.HasIndex("DeliveryPointId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Orders", (string)null);
                });

            modelBuilder.Entity("ProjectForFarmers.Domain.OrderGroupStatistic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long>("Count")
                        .HasColumnType("bigint");

                    b.Property<float>("PercentageChange")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("OrderGroupStatistic");
                });

            modelBuilder.Entity("ProjectForFarmers.Domain.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long>("Count")
                        .HasColumnType("bigint");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("OrdersItems", (string)null);
                });

            modelBuilder.Entity("ProjectForFarmers.Domain.PaymentData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BIC")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BankUSREOU")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HolderFullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("PaymantData", (string)null);
                });

            modelBuilder.Entity("ProjectForFarmers.Domain.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ArticleNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<long>("Count")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<List<string>>("DocumentsNames")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<List<string>>("ImagesNames")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<long>("MinPurchaseQuantity")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PackagingType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("PricePerOne")
                        .HasColumnType("numeric");

                    b.Property<int>("Producer")
                        .HasColumnType("integer");

                    b.Property<Guid>("ProducerId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("SubcategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("UnitOfMeasurement")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SubcategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("ProjectForFarmers.Domain.Schedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("FridayId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MondayId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SaturdayId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SundayId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ThursdayId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TuesdayId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WednesdayId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FridayId")
                        .IsUnique();

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("MondayId")
                        .IsUnique();

                    b.HasIndex("SaturdayId")
                        .IsUnique();

                    b.HasIndex("SundayId")
                        .IsUnique();

                    b.HasIndex("ThursdayId")
                        .IsUnique();

                    b.HasIndex("TuesdayId")
                        .IsUnique();

                    b.HasIndex("WednesdayId")
                        .IsUnique();

                    b.ToTable("Schedules", (string)null);
                });

            modelBuilder.Entity("ProjectForFarmers.Domain.Subcategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Subcategories", (string)null);
                });

            modelBuilder.Entity("ProjectForFarmers.Domain.Farm", b =>
                {
                    b.HasOne("ProjectForFarmers.Domain.Address", "Address")
                        .WithOne()
                        .HasForeignKey("ProjectForFarmers.Domain.Farm", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectForFarmers.Domain.Account", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectForFarmers.Domain.PaymentData", "PaymentData")
                        .WithMany()
                        .HasForeignKey("PaymentDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectForFarmers.Domain.Schedule", "Schedule")
                        .WithOne()
                        .HasForeignKey("ProjectForFarmers.Domain.Farm", "ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Owner");

                    b.Navigation("PaymentData");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("ProjectForFarmers.Domain.FarmLog", b =>
                {
                    b.HasOne("ProjectForFarmers.Domain.Farm", null)
                        .WithMany("Logs")
                        .HasForeignKey("FarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectForFarmers.Domain.MonthStatistic", b =>
                {
                    b.HasOne("ProjectForFarmers.Domain.OrderGroupStatistic", "BookedOrdersStatistic")
                        .WithOne()
                        .HasForeignKey("ProjectForFarmers.Domain.MonthStatistic", "BookedOrdersStatisticId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectForFarmers.Domain.OrderGroupStatistic", "CompletedOrdersStatistic")
                        .WithOne()
                        .HasForeignKey("ProjectForFarmers.Domain.MonthStatistic", "CompletedOrdersStatisticId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectForFarmers.Domain.Farm", null)
                        .WithMany("Dashboard")
                        .HasForeignKey("FarmId");

                    b.HasOne("ProjectForFarmers.Domain.OrderGroupStatistic", "NewOrdersStatistic")
                        .WithOne()
                        .HasForeignKey("ProjectForFarmers.Domain.MonthStatistic", "NewOrdersStatisticId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectForFarmers.Domain.OrderGroupStatistic", "ProcessingOrdersStatistic")
                        .WithOne()
                        .HasForeignKey("ProjectForFarmers.Domain.MonthStatistic", "ProcessingOrdersStatisticId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectForFarmers.Domain.OrderGroupStatistic", "TotalActivityStatistic")
                        .WithOne()
                        .HasForeignKey("ProjectForFarmers.Domain.MonthStatistic", "TotalActivityStatisticId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookedOrdersStatistic");

                    b.Navigation("CompletedOrdersStatistic");

                    b.Navigation("NewOrdersStatistic");

                    b.Navigation("ProcessingOrdersStatistic");

                    b.Navigation("TotalActivityStatistic");
                });

            modelBuilder.Entity("ProjectForFarmers.Domain.Order", b =>
                {
                    b.HasOne("ProjectForFarmers.Domain.Account", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectForFarmers.Domain.Address", "DeliveryPoint")
                        .WithMany()
                        .HasForeignKey("DeliveryPointId");

                    b.Navigation("Customer");

                    b.Navigation("DeliveryPoint");
                });

            modelBuilder.Entity("ProjectForFarmers.Domain.OrderItem", b =>
                {
                    b.HasOne("ProjectForFarmers.Domain.Order", null)
                        .WithMany("Items")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectForFarmers.Domain.Product", b =>
                {
                    b.HasOne("ProjectForFarmers.Domain.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectForFarmers.Domain.Subcategory", "Subcategory")
                        .WithMany()
                        .HasForeignKey("SubcategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Subcategory");
                });

            modelBuilder.Entity("ProjectForFarmers.Domain.Schedule", b =>
                {
                    b.HasOne("ProjectForFarmers.Domain.DayOfWeek", "Friday")
                        .WithOne()
                        .HasForeignKey("ProjectForFarmers.Domain.Schedule", "FridayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectForFarmers.Domain.DayOfWeek", "Monday")
                        .WithOne()
                        .HasForeignKey("ProjectForFarmers.Domain.Schedule", "MondayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectForFarmers.Domain.DayOfWeek", "Saturday")
                        .WithOne()
                        .HasForeignKey("ProjectForFarmers.Domain.Schedule", "SaturdayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectForFarmers.Domain.DayOfWeek", "Sunday")
                        .WithOne()
                        .HasForeignKey("ProjectForFarmers.Domain.Schedule", "SundayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectForFarmers.Domain.DayOfWeek", "Thursday")
                        .WithOne()
                        .HasForeignKey("ProjectForFarmers.Domain.Schedule", "ThursdayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectForFarmers.Domain.DayOfWeek", "Tuesday")
                        .WithOne()
                        .HasForeignKey("ProjectForFarmers.Domain.Schedule", "TuesdayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectForFarmers.Domain.DayOfWeek", "Wednesday")
                        .WithOne()
                        .HasForeignKey("ProjectForFarmers.Domain.Schedule", "WednesdayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Friday");

                    b.Navigation("Monday");

                    b.Navigation("Saturday");

                    b.Navigation("Sunday");

                    b.Navigation("Thursday");

                    b.Navigation("Tuesday");

                    b.Navigation("Wednesday");
                });

            modelBuilder.Entity("ProjectForFarmers.Domain.Subcategory", b =>
                {
                    b.HasOne("ProjectForFarmers.Domain.Category", "Category")
                        .WithMany("Subcategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ProjectForFarmers.Domain.Category", b =>
                {
                    b.Navigation("Subcategories");
                });

            modelBuilder.Entity("ProjectForFarmers.Domain.Farm", b =>
                {
                    b.Navigation("Dashboard");

                    b.Navigation("Logs");
                });

            modelBuilder.Entity("ProjectForFarmers.Domain.Order", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
